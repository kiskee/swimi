type Candidate @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  email: String
  message: String
}

type Likes @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userName: String
  todoID: ID! @index(name: "byTodo")
}

type Comments @model @auth(rules: [{ allow: public }]) {
  id: ID!
  todoID: ID! @index(name: "byTodo")
  description: String
  todo: Todo @belongsTo(fields: ["todoID"])
  userName: String
}

type Todo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  description: String
  image: String
  Comments: [Comments] @hasMany(indexName: "byTodo", fields: ["id"])
  Likes: [Likes] @hasMany(indexName: "byTodo", fields: ["id"])
  category: String
}

type Subscription {
  newOnCreateTodo: Todo @aws_subscribe(mutations: ["createTodo"])
}

type ModuleOne @model @auth(rules: [{ allow: public }]) {
  id: ID!
  reference: String!
  paymentId: String!
  paymentMethod: String
  currency: String
  transactionId: String
  status: String!
  statusMessage: String
  createDate: String
  endDate: String
  userName: String
  userEmail: String
  userPoolId: String
}

type Transaction @model @auth(rules: [{ allow: public }]) {
  id: ID!
  transactionId: String!
  checksum: String!
  amountInCents: Int
  reference: String
  customerEmail: String
  currency: String
  paymentMethodType: String
  redirectUrl: String
  status: String
  event: String
  environment: String
  timestamp: Int
  sentAt: String
}
